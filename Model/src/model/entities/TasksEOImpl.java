package model.entities;

import java.sql.Timestamp;

import oracle.jbo.Key;
import oracle.jbo.RowSet;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Jan 13 23:07:20 PST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TasksEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        TaskId,
        TaskTitle,
        Description,
        StartDate,
        EndDate,
        Status,
        AssignedTo,
        AssignedBy,
        Users,
        Users1,
        TaskStatusVO1;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int TASKID = AttributesEnum.TaskId.index();
    public static final int TASKTITLE = AttributesEnum.TaskTitle.index();
    public static final int DESCRIPTION = AttributesEnum.Description.index();
    public static final int STARTDATE = AttributesEnum.StartDate.index();
    public static final int ENDDATE = AttributesEnum.EndDate.index();
    public static final int STATUS = AttributesEnum.Status.index();
    public static final int ASSIGNEDTO = AttributesEnum.AssignedTo.index();
    public static final int ASSIGNEDBY = AttributesEnum.AssignedBy.index();
    public static final int USERS = AttributesEnum.Users.index();
    public static final int USERS1 = AttributesEnum.Users1.index();
    public static final int TASKSTATUSVO1 = AttributesEnum.TaskStatusVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TasksEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.entities.TasksEO");
    }


    /**
     * Gets the attribute value for TaskId, using the alias name TaskId.
     * @return the value of TaskId
     */
    public DBSequence getTaskId() {
        return (DBSequence) getAttributeInternal(TASKID);
    }

    /**
     * Sets <code>value</code> as the attribute value for TaskId.
     * @param value value to set the TaskId
     */
    public void setTaskId(DBSequence value) {
        setAttributeInternal(TASKID, value);
    }

    /**
     * Gets the attribute value for TaskTitle, using the alias name TaskTitle.
     * @return the value of TaskTitle
     */
    public String getTaskTitle() {
        return (String) getAttributeInternal(TASKTITLE);
    }

    /**
     * Sets <code>value</code> as the attribute value for TaskTitle.
     * @param value value to set the TaskTitle
     */
    public void setTaskTitle(String value) {
        setAttributeInternal(TASKTITLE, value);
    }

    /**
     * Gets the attribute value for Description, using the alias name Description.
     * @return the value of Description
     */
    public String getDescription() {
        return (String) getAttributeInternal(DESCRIPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Description.
     * @param value value to set the Description
     */
    public void setDescription(String value) {
        setAttributeInternal(DESCRIPTION, value);
    }

    /**
     * Gets the attribute value for StartDate, using the alias name StartDate.
     * @return the value of StartDate
     */
    public Timestamp getStartDate() {
        return (Timestamp) getAttributeInternal(STARTDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for StartDate.
     * @param value value to set the StartDate
     */
    public void setStartDate(Timestamp value) {
        setAttributeInternal(STARTDATE, value);
    }

    /**
     * Gets the attribute value for EndDate, using the alias name EndDate.
     * @return the value of EndDate
     */
    public Timestamp getEndDate() {
        return (Timestamp) getAttributeInternal(ENDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for EndDate.
     * @param value value to set the EndDate
     */
    public void setEndDate(Timestamp value) {
        setAttributeInternal(ENDDATE, value);
    }

    /**
     * Gets the attribute value for Status, using the alias name Status.
     * @return the value of Status
     */
    public String getStatus() {
        return (String) getAttributeInternal(STATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Status.
     * @param value value to set the Status
     */
    public void setStatus(String value) {
        setAttributeInternal(STATUS, value);
    }

    /**
     * Gets the attribute value for AssignedTo, using the alias name AssignedTo.
     * @return the value of AssignedTo
     */
    public Integer getAssignedTo() {
        return (Integer) getAttributeInternal(ASSIGNEDTO);
    }

    /**
     * Sets <code>value</code> as the attribute value for AssignedTo.
     * @param value value to set the AssignedTo
     */
    public void setAssignedTo(Integer value) {
        setAttributeInternal(ASSIGNEDTO, value);
    }

    /**
     * Gets the attribute value for AssignedBy, using the alias name AssignedBy.
     * @return the value of AssignedBy
     */
    public Integer getAssignedBy() {
        return (Integer) getAttributeInternal(ASSIGNEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for AssignedBy.
     * @param value value to set the AssignedBy
     */
    public void setAssignedBy(Integer value) {
        setAttributeInternal(ASSIGNEDBY, value);
    }

    /**
     * @return the associated entity UsersEOImpl.
     */
    public UsersEOImpl getUsers() {
        return (UsersEOImpl) getAttributeInternal(USERS);
    }

    /**
     * Sets <code>value</code> as the associated entity UsersEOImpl.
     */
    public void setUsers(UsersEOImpl value) {
        setAttributeInternal(USERS, value);
    }

    /**
     * @return the associated entity UsersEOImpl.
     */
    public UsersEOImpl getUsers1() {
        return (UsersEOImpl) getAttributeInternal(USERS1);
    }

    /**
     * Sets <code>value</code> as the associated entity UsersEOImpl.
     */
    public void setUsers1(UsersEOImpl value) {
        setAttributeInternal(USERS1, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> TaskStatusVO1.
     */
    public RowSet getTaskStatusVO1() {
        return (RowSet) getAttributeInternal(TASKSTATUSVO1);
    }


    /**
     * @param taskId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(DBSequence taskId) {
        return new Key(new Object[] { taskId });
    }

    @Override
    protected void initDefaults() {
        // TODO Implement this method
        super.initDefaults();
        
        SequenceImpl seq = new SequenceImpl("TASKS_SEQ", getDBTransaction());
        DBSequence dbseq = new DBSequence(seq.getSequenceNumber());
        populateAttributeAsChanged(TASKID, dbseq);
    }
    
}

